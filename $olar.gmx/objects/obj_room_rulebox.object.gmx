<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_persistent = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Counter
global.turn = 0;
if(global.timer_turn_reset &gt;= 30)
{
    global.timer_turn += 1;
    global.timer_turn_reset = 0;
    global.turn = 1;
}

global.timer += 1; //Note: Do not create another timer incrementor in any other step action: the intracacies of the calculation seem to just lead to the whole action being skipped.
global.timer_turn_reset += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Production &amp; Consumption

if (global.turn = 1)
{
    for(i = 1; i &lt; global.max_cities; i += 1)
    {
        //Production 
        global.city_labour[i] = global.city_pop[i];
        if(global.city_labour[i] &lt; global.city_food_cap[i]*(0.95))
        {   
            global.city_food[i] += 1.1*global.city_labour[i]*(0.95);
            global.city_labour[i] = global.city_labour[i]*(1-0.95);
        }
        else
        {
            global.city_food[i] += 1.1*global.city_food_cap[i];
            global.city_labour[i] -= global.city_food_cap[i];
        }
        if(global.city_labour[i] &lt; global.city_builds_cap[i]*(0.95))
        {
            global.city_builds[i] += global.city_labour[i]*(0.95);
            global.city_labour[i] = global.city_labour[i]*(1-0.95);
        }
        else
        {
            global.city_builds[i] += global.city_labour[i];
            global.city_labour[i] -= global.city_builds_cap[i];
        }
        
        //Rates per pop before consumption
        global.city_food_per_pop[i] = (global.city_food[i]/global.city_pop[i]); 
        
        //Consumption
        if((global.city_food[i]/global.city_pop[i]) &gt;= 0.8 )
        {
            global.city_starving[i] = 0;
        }
        if ((global.city_food[i]/global.city_pop[i]) &gt; 1)
        {
        global.city_pop[i] = global.city_pop[i]*1.02
        }
        if (((global.city_food[i]/global.city_pop[i])) &gt; 2)
        {
        global.city_pop[i] = global.city_pop[i]*1.04
        }
        
        if((global.city_food[i]/global.city_pop[i]) &lt; 0.8 )
        {
            global.city_starving[i] += 1;
            if (global.city_starving[i] &gt; 5)
            {
                global.city_pop[i] = global.city_pop[i]*0.98
            }
        }
        if((global.city_food[i]/global.city_pop[i]) &lt; 0.4) //this needs to be moved so that the act of refilling the cities food resevers happens before hand.
        {
            global.city_starving[i] += 2;
            if (global.city_starving[i] &gt; 5)
            {
                global.city_pop[i] = global.city_pop[i]*0.90
            }
        }
        
        global.city_food[i] -= global.city_pop[i]; //Eating step
        
        //Positive Number Check
        if (global.city_pop[i] &lt; 0)
        {
            global.city_pop[i] = 0;
        }
        if (global.city_food[i] &lt; 0) 
        {
            global.city_food[i] = 0;
        }
        if (global.city_builds[i] &lt; 0)
        {
            global.city_builds[i] = 0;
        }
        if (global.city_labour[i] &lt; 0)
        {
            global.city_labour[i] = 0;
        }
            
    } 
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sociology Calculations
if (global.timer &gt;= 30) 
{
    i = 0;
    repeat(global.max_cities)
    {
        //Jealousy Calculations
        /* Don't care for now +  needs to be upgraded to indexs
        if ( city != 0 &amp;&amp; obj_rulebox.nth_city &gt; 1)
        {
            if (city = 1) //Calcuations for City 1
            {
                var inst = obj_rulebox.city_id_2
                if ((inst.food*2) &lt; food)
                    {
                        opinion_city_2 = "small";
                    }
            }
            if (city = 2) //Calcuations for City 2
            {
                var inst = obj_rulebox.city_id_1
                if ((inst.food*2) &lt; food) 
                    {
                        opinion_city_1 = "small"
                    }
            }
        }
        */
        
        //Unrest calculations
        
        if( global.city_starving[i] &gt;= 1)
        {
            global.city_unrest[i] += 1;
        }
        
        //Uprising
        if(global.city_unrest[i] &gt;= 20 &amp;&amp; global.city_civ[i] = 1)
        {
        global.city_civ[i] = 2;
        audio_play_sound(s_bad,0,false);
        }
    }    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Civilisation (AI) calculations

/* I'll worry about the ai later

if(war_2_with_1 = 1)
{
    max_soldier = pop*0.01;
    if(soldier &lt; max_soldier &amp;&amp; builds &gt; 0)
    {
        city_soldier[i] += 0.1; 
        city_pop[i] -= 0.11; //brutal training, huh?
        city_builds[i] -= 1;
    }
    
    if(timer &gt;= 30)
    {
    war_timer += 1;
    }
    
    if(war_timer = 12)
    {
    war_warning = 1;
    }
    
    if(war_timer = 24)
    {
        if(obj_rulebox.city_soldier[2] &gt;= obj_rulebox.city_soldier[1])
        {
                obj_rulebox.city_civ[i] = 2;
                war_2_with_1 = 0;
        }
        if(obj_rulebox.city_soldier[1] &gt; obj_rulebox.city_soldier[2])
        {
            obj_rulebox.city_soldier[1] -= obj_rulebox.city_soldier[2];
            obj_rulebox.city_soldier[2] = 0;
        }
        war_warning = 0;
    }

    
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gui Calculations
if(global.nth_city &gt; 0)
{
    if(object_get_name(global.selected_id) = obj_tile)
    {
        if(global.selected_id != 0)
        {
            if(global.selected_id.is_city = 1)
            global.draw_buttons = 1;
        }
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Text Drawing
draw_set_colour(c_white);



if (global.working = 1)
{
    draw_text(400, 400, "Working");
    draw_text(400, 410, "Test_Var1 = " + string(global.test_var_1));
    draw_text(400, 420, "Test_Var2 = " + string(global.test_var_2));
}



//Diplomatic
if(global.war_warning = 1)
draw_text(400, 400, "The other CIV will attack in 12 turns");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.c_engaged = 0;
global.f_engaged = 0;
global.m_engaged = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.c_engaged = 0;
global.f_engaged = 1;
global.m_engaged = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.c_engaged = 1;
global.f_engaged = 0;
global.m_engaged = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_Jupiter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.c_engaged = 0;
global.f_engaged = 0;
global.m_engaged = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
