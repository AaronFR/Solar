<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables

//GUI
moused = 0;
selected = 0;

s_bad = 0;

//Improvements
is_city = 0;
is_farm = 0;
    is_farm_building = 0;
is_mine = 0;

can_build_city = 1;
can_build_farm = 1;
can_build_mine = 1;

construction_step = 0;
cost_contribution = 0;
cost_builds = 0;
cost_labour = 0;

//Terrain
is_land = 0;
    type = 1; //designates tile graphic to use
    is_mountain = 0;
    is_forrest = 0;
is_water = 0;

//Properties
/*
city_control_1 = 0;
city_control_2 = 0;
*/
city = 0;
city_control = 0;
city_control_points_max = 0;
opinion_city_1 = "null";
opinion_city_2 = "null";

civ = 0;


production_percentage = 0;

//Sociology Factors
soldier = 0;
police = 0;
unrest = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Indexs
for(i = 1; i &lt; global.max_cities; i += 1)
{
    city_control_points[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///City Check
//I had hoped to keep this in designation mode, to cut down resources so that the control points would only have to be calculated when they change
//That however doesn't work too smoothly, we can try moving back to that later if we ever need to omptimise

/* Old code from Bomb Code in Designation Mode
for(j = 0; j &lt; (global.max_cities - 1); j++)
{
    if(city_control_points[j+1] &gt; inst.city_control_points[j])
    {
        civ = global.city_civ[j+1];
        city = (j+1);
        city_control = city_control_points[j+1];
        if(is_land = 1)
        {
            if(is_forrest = 1)
            {
                global.city_builds_cap[j+1] += 1;
            }
            else
            global.city_food_cap[j+1] += 1;
        }
    }
}
*/

for(j = 1; j &lt; (global.max_cities); j++)
{
    if(city_control_points[j] &gt; city_control_points_max)
    {
        city_control_points_max = city_control_points[j];
        if (j != city)
        {
            if(is_land = 1)
            {
                if(is_forrest = 1)
                {
                    global.city_builds_cap[j] += 1;
                    global.city_builds_cap[city] -= 1;
                }
                else
                global.city_food_cap[j] += 1;
                global.city_food_cap[city] -= 1;
            }    
            city = j;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moused = 0;
//moused = 1;
global.moused_id = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.show_text = 1;

if instance_exists(obj_tile)
{
    if(is_land = 1)
    {
        selected = 1;
        global.selected_id = id;
    }
    else
    {
    global.selected_id = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tile Drawing
//draw_self();

if (is_land = 1)
{
    if (room = rm_Planet || room = rm_planet_1 || room = rm_planet_2) //In future this should be replced with something more efficient
    {
        if (is_forrest = 1)
        {
            draw_sprite(sp_forrest,0,x,y)
        }else
        draw_sprite(sp_land1,0,x,y);
    }
    if (room = rm_Mars)
    {
        if (type=1)
        {
        draw_sprite(sp_mars_plains,0,x,y);
        }
        if (type=2)
        {
        draw_sprite(sp_mars_plains_2,0,x,y);
        }
    }
}

if (is_mountain = 1)
{
    draw_sprite(sp_mountain,0, x, y);
}


if (is_water = 1)
{
    draw_sprite(sp_water,0, x, y);
}


//improvement drawing
if (is_city = 1)
{
    draw_sprite(sp_city,0,x,y);
}
if (is_farm = 1)
{
    draw_sprite(sp_farm,0,x,y);
}
if (is_mine = 1)
{
    draw_sprite(sp_mine,0,x,y);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Designation Mode
//City Creation &amp; Control Spread

if (global.c_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_city = 1 &amp;&amp; is_land = 1 &amp;&amp; civ &lt;= 1)
{
    draw_sprite (sp_city_outline,0,x,y)

}



if(global.c_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_city = 1 &amp;&amp; is_city = 0 &amp;&amp; mouse_check_button(mb_left) &amp;&amp; is_land = 1 &amp;&amp; civ &lt;= 1)
{
    global.nth_city += 1;
    city = global.nth_city;
    is_city = 1;
    can_build_city = 0; can_build_farm = 0;
    civ = 1;
    
    global.city_id[city] = instance_position( x,y, obj_tile);
    global.city_control[city] = 100;   
      
    city_control_points[city] = 100;
    
    n = 1;
    for(R = 1; R &lt;= 10; R += 1;)
    {
        
        r = R -1; //Useful for some math
    
        for (n = 0; n &lt;= (2*r); n += 1;)
            {
                
                a = x - 40*r + 40*(n);
                b = y - 40*R;
                var inst = instance_position(a,b, obj_tile)
                
                if inst != noone
                {
                    inst.city_control_points[city] = 100*(1/power(2,R));
                }
            }
        
        for (n = 0; n &lt;= (2*r + 2); n += 1;)
            {
                
                a = x + 40*R;
                b = y - 40*R + 40*(n);
                var inst = instance_position(a,b, obj_tile)
                
                if inst != noone
                {
                    inst.city_control_points[city] = 100*(1/power(2,R));
                }
            }
        
        for (n = 0; n &lt;= (2*r); n += 1;)
            {
                
                a = x + 40*r - 40*(n);
                b = y + 40*R;
                var inst = instance_position(a,b, obj_tile)
                
                if inst != noone
                {
                    inst.city_control_points[city] = 100*(1/power(2,R));
                }
            }
        
        for (n = 0; n &lt;= (2*r + 2); n += 1;)
            {
                
                a = x - 40*R;
                b = y + 40*R - 40*(n);
                var inst = instance_position(a,b, obj_tile)
                
                if inst != noone
                {
                    inst.city_control_points[city] = 100*(1/power(2,R));
                }
            }        
            
    }
}


//Farm Outline
if (global.f_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_farm = 1 &amp;&amp; is_land = 1 &amp;&amp; civ &lt;= 1)
{
    draw_sprite (sp_farm_outline,0,x,y)
}    

//Farm Construction designation
if(global.f_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_farm = 1 &amp;&amp; is_farm = 0 &amp;&amp; mouse_check_button(mb_left) &amp;&amp; is_land = 1 &amp;&amp; civ &lt;= 1)
{
    is_farm_building = 1;
    can_build_city = 0; can_build_farm = 0;
}

if(is_farm_building = 1)
{
    
    draw_sprite(sp_farm_outline,0,x,y)
    
    if (construction_step = 0)
    {
        cost_builds = 15;
        cost_labour = 5; 
        construction_step = 1;
    }
    
    
    if (global.city_builds[city] &gt;= cost_builds) //event for if the city can afford either cost straight up
        {
            global.city_builds[city] -= cost_builds;
            cost_builds = 0;
        }
        if (global.city_labour[city] &gt;= cost_labour)
        {
            global.city_labour[city] -= cost_labour;
            cost_labour = 0;
        }
        if (global.city_builds[city] &lt; cost_builds) //event for if the city is making a partial payment
        {
            cost_contribution = global.city_builds[city];
            global.city_builds[city] -= cost_contribution;
            cost_builds -= cost_contribution;
        }
        if (global.city_labour[city] &lt; cost_labour)
        {
            cost_contribution = global.city_labour[city];
            global.city_labour[city] -= cost_contribution;
            cost_labour -= cost_contribution;
        }
        
        if (cost_builds = 0 &amp;&amp; cost_labour = 0)
        {
        is_farm_buidling = 0;
        is_farm = 1;
        }
}

if(is_farm = 1)
{
    draw_sprite(sp_farm,0,x,y)
}

//Mine Creation
if (global.m_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_mine = 1 &amp;&amp; is_land = 1 &amp;&amp; civ &lt;= 1)
{
    draw_sprite (sp_mine_outline,0,x,y)

}


if(global.m_engaged = 1 &amp;&amp; global.moused_id = id &amp;&amp; can_build_mine = 1 &amp;&amp; is_mine = 0 &amp;&amp; mouse_check_button(mb_left) &amp;&amp; civ &lt;= 1)
{
    is_mine = 1;
    can_build_city = 0; can_build_mine = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Text
draw_set_colour(c_white);


if(global.selected_id = id)
{
    
    //city = global.selected_id.city;
    
    //Sociology
    if (city != 0)
    {
        draw_text( 300, 700, "Unrest:" + string(global.city_unrest[city]));
            draw_text( 300, 710, "Soldiers" + string(global.city_soldier[city]));
            draw_text( 300, 660, "City: " + string(city));//Temp later on it should call city_name index
            draw_text( 300, 670, "Agri Cap: " + string(global.city_food_cap[city]));
            draw_text( 400, 660, "City:" + string(city) + string(city_control_points));
            //draw_text( 300, 670, "Opinion of Neighbour: " + string(opinion_city_2));
        
            draw_text( 600, 680, "Civ:" + string(global.city_civ[city]));
    }
    
    if (is_land = 1)
    {
        if(is_city = 0)
        {
            if(is_forrest = 1)
            {
            draw_text(20, 650, "Forrest")
            draw_text(160,650, "Eff: " + string(production_percentage) + "%" );
            }
            else
            {
            draw_text(20, 650, "Plains")
            draw_text( 400, 660, "City:" + string(city) + string(city_control_points));
            draw_text(160,650, "Eff: " + string(production_percentage) + "%" );
            }
        }

    }
    if (is_water = 1)
    {
        draw_text(20, 650, "Ocean")
    }
    
    //improvements
    if (is_city = 1) 
    {
        draw_text(20, 660, "City")
        draw_text(160,650, "Pop:  " + string(global.city_pop[city]) + " k");
        draw_text(160,660, "Labour: " + string(global.city_labour[city]) + " k");
        draw_text(160,670, "Food/P: " + string(global.city_food_per_pop[city]) + " T/p"); //OLD TEXT: draw_text(160,670, "Food: " + string(food) + " kT");
        draw_text(160,680, "Builds: " + string(global.city_builds[city]) + " kT");
        
        if (global.city_starving[city] &gt; 6)
        {
            draw_text(160,700, "STARVING");
        }
    }
    
    if (is_farm = 1) 
    {
        draw_text(20, 650, "Farm")
        draw_text(160,650, "Eff: " + string(production_percentage) + "%" );
        
    }
        if (is_farm_building = 1) 
        {
            draw_text(20, 650, "Farm Const");
            draw_text(300, 710, "Builds Required: " + string(cost_builds) + " k");
            draw_text(300, 720, "Labour Required: " + string(cost_labour) + " k");
            
        }
    if (is_mine = 1) 
    {
        draw_text(20, 650, "Mine")
        draw_text(160,650, "Eff: " + string(production_percentage) + "%" );
    }



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
